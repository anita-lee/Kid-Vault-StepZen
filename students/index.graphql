type Student {
  birth_date: String!
  classroom: String
  contacts_list: [Contact] @materializer(query: "getContactsByStudentId")
  first_name: String!
  id: Int!
  image_url: String
  last_name: String!
  medical_records: MedicalRecords
    @materializer(
      query: "getMedicalRecordsByStudentId"
      arguments: [{ name: "student_id", field: "id" }]
    )
  guardian: Contact @materializer(query: "getPrimaryContactByStudentId")
}

type Contact {
  email: String
  id: Int!
  name: String!
  other: String
  phone: String
  relation: String
  student_id: Int
  student: Student
    @materializer(
      query: "getStudent"
      arguments: [{ name: "id", field: "student_id" }]
    )
}

type MedicalRecords {
  covid1: String
  covid2: String
  flu: String
  mmr: String
  polio: String
  student_height: Float
  student_id: Int!
  student_weight: Float
  student: Student
    @materializer(
      query: "getStudent"
      arguments: [{ name: "id", field: "student_id" }]
    )
  tb: String
  tetanus: String
}

type ClassroomList {
  first_name: String
  last_name: String
  classroom: String
  id: Int
  primary_contact: Contact @materializer(query: "getPrimaryContactByStudentId")
  covid2: MedicalRecords
    @materializer(
      query: "getMedicalRecordsByStudentId"
      arguments: [{ name: "student_id", field: "id" }]
    )
}

type CombinedClassCountyData {
  id: Int!
  fips: String!
  county_data: CountyRoot @materializer(query: "getCurrDataByCounty")
  class_data: [ClassroomList] @materializer(query: "getCovidClassroomList")
}

type Query {
  getCombinedClassCountyData(id: Int!, fips: String!): CombinedClassCountyData
    @connector(type: "echo")

  getCovidClassroomList(id: Int!, classroom: String): [ClassroomList]
    @sequence(steps: [{ query: "getStudent" }, { query: "getClassroomList" }])

  getClassroomList(classroom: String!): [ClassroomList]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."last_name", T."id", T."first_name"
        FROM "public"."students" T
        WHERE "classroom" = $1
      """
      configuration: "postgresql_config"
    )

  getContactsList: [Contact]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "contacts"
      configuration: "postgresql_config"
    )

  getContactById(id: Int!): Contact
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "contacts"
      configuration: "postgresql_config"
    )

  getMedicalRecordsList: [MedicalRecords]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "medical_records"
      configuration: "postgresql_config"
    )

  getMedicalRecordsByStudentId(student_id: Int!): MedicalRecords
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "medical_records"
      configuration: "postgresql_config"
    )

  getStudentList: [Student]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "students"
      configuration: "postgresql_config"
    )

  getStudent(id: Int!): Student
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "students"
      configuration: "postgresql_config"
    )

  getContactsByStudentId(id: Int!): [Contact]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."email", T."id", T."name", T."other", T."phone", T."relation", T."student_id"
        FROM "public"."contacts" T
        WHERE T."student_id" = $1
      """
      configuration: "postgresql_config"
    )

  getPrimaryContactByStudentId(id: Int!): Contact
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."email", T."id", T."name", T."other", T."phone", T."relation", T."student_id"
        FROM "public"."contacts" T
        WHERE T."student_id" = $1
        LIMIT 1
      """
      configuration: "postgresql_config"
    )

  getStudentsByGuardianChildren(username: String!): [Student]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."birth_date", T."classroom", T."first_name", T."id", T."image_url", T."last_name"
        FROM "public"."students" T, "public"."guardian_children" V
        WHERE V."guardian_username" = $1
          AND V."child_id" = T."id"
      """
      configuration: "postgresql_config"
    )
}

type Mutation {
  insertStudent(
    first_name: String!
    last_name: String!
    birth_date: String!
    classroom: String!
    image_url: String!
  ): Student
    @rest(method: POST, endpoint: "https://test-mom-api.herokuapp.com/students")

  insertGuardianChild(child_id: Int!, guardian_username: String!): JSON
    @rest(
      method: POST
      endpoint: "https://test-mom-api.herokuapp.com/guardianchildren"
    )

  insertContact(
    other: String!
    email: String!
    name: String!
    phone: String!
    student_id: Int!
    relation: String!
  ): Contact
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "contacts"
      dml: INSERT
      configuration: "postgresql_config"
    )

  deleteContact(id: Int!): Contact
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "contacts"
      dml: DELETE
      configuration: "postgresql_config"
    )

  insertMedicalRecords(
    student_weight: Float!
    flu: String!
    covid2: String!
    tb: String!
    covid1: String!
    tetanus: String!
    student_height: Float!
    student_id: Int!
    mmr: String!
    polio: String!
  ): MedicalRecords
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "medical_records"
      dml: INSERT
      configuration: "postgresql_config"
    )

  deleteMedicalRecords(student_id: Int!): MedicalRecords
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "medical_records"
      dml: DELETE
      configuration: "postgresql_config"
    )

  deleteStudent(id: Int!): Student
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "students"
      dml: DELETE
      configuration: "postgresql_config"
    )

}
